// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"

}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String      @id @default(uuid())
  name        String
  email       String      @unique
  password    String
  role        UserRole    @default(USER)
   status      UserStatus  @default(ACTIVE)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  foundItems  FoundItem[]
  claims      Claim[]
  profile     UserProfile?
  lostItems   LostItem[]
  @@map("users")
}


model FoundItemCategory {
  id          String      @id @default(uuid())
  name        String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
    foundItems  FoundItem[]
     lostItems   LostItem[]
  @@map("foundItemCategorys")
}

model FoundItem {
  id            String      @id @default(uuid())
  user          User        @relation(fields: [userId], references: [id])
  userId        String
  category      FoundItemCategory @relation(fields: [categoryId], references: [id])
  categoryId    String
  foundItemName String
  photo         String?
  description   String
  location      String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  claims        Claim[]
   @@map("foundItems")
}

model LostItem {
  id            String      @id @default(uuid())
  user          User        @relation(fields: [userId], references: [id])
  userId        String
  category      FoundItemCategory    @relation(fields: [categoryId], references: [id])
  categoryId    String
  name          String
  photo         String?
  description   String
  location      String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  @@map("lost_items")
}

model Claim {
  id                    String      @id @default(uuid())
  user                  User        @relation(fields: [userId], references: [id])
  userId                String
  foundItem             FoundItem   @relation(fields: [foundItemId], references: [id])
  foundItemId           String
  status                String      @default("PENDING")
  distinguishingFeatures String      // Detailed description of the item to verify ownership
  lostDate              DateTime    // Date when the item was lost
  verificationMethod    String?     // Method used for verifying ownership (e.g., photos, documents)
  verificationDetails   String?     // Additional details or notes on verification
  contactInformation     String?     // Contact info of claimant
  createdAt             DateTime    @default(now())
  updatedAt             DateTime    @updatedAt
}



model UserProfile {
  id        String      @id @default(uuid())
  user      User        @relation(fields: [userId], references: [id])
  userId    String      @unique
  bio       String?
  age       Int?
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  @@map("userProfiles")
}
enum UserRole {
  ADMIN
 USER
}

enum UserStatus {
  ACTIVE
  INACTIVE
}